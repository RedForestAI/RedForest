generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Supabase Auth
////////////////////////////////////////////////////////////////////////////////////////////////////////

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?   @db.Uuid
  id                          String    @id @db.Uuid
  aud                         String?   @db.VarChar(255)
  role                        String?   @db.VarChar(255)
  email                       String?   @db.VarChar(255)
  encrypted_password          String?   @db.VarChar(255)
  email_confirmed_at          DateTime? @db.Timestamptz(6)
  invited_at                  DateTime? @db.Timestamptz(6)
  confirmation_token          String?   @db.VarChar(255)
  confirmation_sent_at        DateTime? @db.Timestamptz(6)
  recovery_token              String?   @db.VarChar(255)
  recovery_sent_at            DateTime? @db.Timestamptz(6)
  email_change_token_new      String?   @db.VarChar(255)
  email_change                String?   @db.VarChar(255)
  email_change_sent_at        DateTime? @db.Timestamptz(6)
  last_sign_in_at             DateTime? @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime? @db.Timestamptz(6)
  updated_at                  DateTime? @db.Timestamptz(6)
  phone                       String?   @unique
  phone_confirmed_at          DateTime? @db.Timestamptz(6)
  phone_change                String?   @default("")
  phone_change_token          String?   @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime? @db.Timestamptz(6)
  confirmed_at                DateTime? @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?   @default("") @db.VarChar(255)
  email_change_confirm_status Int?      @default(0) @db.SmallInt
  banned_until                DateTime? @db.Timestamptz(6)
  reauthentication_token      String?   @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime? @db.Timestamptz(6)
  is_sso_user                 Boolean   @default(false)
  deleted_at                  DateTime? @db.Timestamptz(6)

  // Adding custom data
  ownCourses Course[] @relation(name: "ownCourses")

  @@index([instance_id])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// RedForest Data
////////////////////////////////////////////////////////////////////////////////////////////////////////

model Course {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  published Boolean @default(false)
  owner     users?  @relation(name: "ownCourses", fields: [ownerId], references: [id])
  ownerId   String  @db.Uuid

  @@schema("public")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Profile {
  id                String      @id @db.Uuid
  role              Role        @default(STUDENT)
  
  // TEACHER
  ownCourses        Course[]    @relation(name: "ownCourses")

  // STUDENT
  enrollCourses     courseEnrollment[]

  @@map("profile")
}

model Course {
  id                String      @id @default(uuid()) @db.Uuid
  name              String
  
  // TEACHER
  teacher           Profile     @relation(name: "ownCourses", fields: [teacherId], references: [id])
  teacherId         String      @db.Uuid
  password          CoursePassword @relation(fields: [passwordId], references: [id])
  passwordId        String      @db.Uuid @unique
  
  // STUDENT
  students          courseEnrollment[]

  // Assignment
  assignments       Assignment[]

  @@map("course")
}

model CoursePassword {
  id                String      @id @default(uuid()) @db.Uuid
  course            Course?     
  courseId          String?     @db.Uuid @unique
  secret            String      @unique

  @@map("course_password")
}

// Reference: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/working-with-many-to-many-relations#explicit-relations
model courseEnrollment {
  id                String      @id @default(uuid()) @db.Uuid
  student           Profile     @relation(fields: [studentId], references: [id])
  studentId         String      @db.Uuid
  course            Course      @relation(fields: [courseId], references: [id])
  courseId          String      @db.Uuid

  @@index([studentId, courseId])
  @@map("course_enrollment")
}

model Assignment {
  id                String      @id @default(uuid()) @db.Uuid
  name              String
  dueDate           DateTime    @default(now())
  course            Course      @relation(fields: [courseId], references: [id])
  courseId          String      @db.Uuid

  activities        Activity[]

  published         Boolean     @default(false)
  publishedDate     DateTime    @default(now())
  @@map("assignment")
}

enum ActivityType {
  READING
}

model Activity {
  id                String      @id @default(uuid()) @db.Uuid
  index             Int
  name              String?
  description       String?
  type              ActivityType
  questions         Question[]

  // Assignment
  assignment        Assignment  @relation(fields: [assignmentId], references: [id])
  assignmentId      String      @db.Uuid
  @@map("activity")
}

model ReadingActivity {
  id                String      @id @default(uuid()) @db.Uuid
  readingUrl        String[]
  @@map("activity_reading")
}

model Question {
  id                String      @id @default(uuid()) @db.Uuid
  content           String
  options           Json
  answer            Int

  // Activity
  activity          Activity    @relation(fields: [activityId], references: [id])
  activityId        String      @db.Uuid
  @@map("question")
}
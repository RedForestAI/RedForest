generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Profile {
  id                String      @id @db.Uuid
  role              Role        @default(STUDENT)
  
  // TEACHER
  ownCourses        Course[]    @relation(name: "ownCourses")

  // STUDENT
  enrollCourses     courseEnrollment[]
  userAssignmentData AssignmentData[]

  @@map("profile")
}

model Course {
  id                String      @id @default(uuid()) @db.Uuid
  name              String
  
  // TEACHER
  teacher           Profile     @relation(name: "ownCourses", fields: [teacherId], references: [id])
  teacherId         String      @db.Uuid
  password          CoursePassword @relation(fields: [passwordId], references: [id])
  passwordId        String      @db.Uuid @unique
  
  // STUDENT
  students          courseEnrollment[]

  // Assignment
  assignments       Assignment[]

  @@map("course")
}

model CoursePassword {
  id                String      @id @default(uuid()) @db.Uuid
  course            Course?     
  courseId          String?     @db.Uuid @unique
  secret            String      @unique

  @@map("course_password")
}

// Reference: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/working-with-many-to-many-relations#explicit-relations
model courseEnrollment {
  id                String      @id @default(uuid()) @db.Uuid
  student           Profile     @relation(fields: [studentId], references: [id])
  studentId         String      @db.Uuid
  course            Course      @relation(fields: [courseId], references: [id])
  courseId          String      @db.Uuid

  @@index([studentId, courseId])
  @@map("course_enrollment")
}

model Assignment {
  id                String      @id @default(uuid()) @db.Uuid
  name              String
  dueDate           DateTime    @default(now())
  course            Course      @relation(fields: [courseId], references: [id])
  courseId          String      @db.Uuid

  activities        Activity[]

  // Student data
  assignmentData    AssignmentData[]

  published         Boolean     @default(false)
  publishedDate     DateTime    @default(now())
  @@map("assignment")
}

model AssignmentData {
  id                String      @id @default(uuid()) @db.Uuid
  createdAt         DateTime    @default(now())
  completed         Boolean     @default(false)
  completedAt       DateTime?
  currentActId      Int         @default(0)
  totalActs         Int         @default(0)
  score             Int         @default(0)
  
  student           Profile     @relation(fields: [studentId], references: [id])
  studentId         String      @db.Uuid

  assignment        Assignment  @relation(fields: [assignmentId], references: [id])
  assignmentId      String      @db.Uuid

  activityData      ActivityData[]

  @@map("user_assignment_data")

}

enum ActivityType {
  READING
  QUESTIONING
  READING_BEHAVIOR
}

model Activity {
  id                String      @id @default(uuid()) @db.Uuid
  index             Int
  name              String      @default("Activity")
  description       String?
  type              ActivityType
  questions         Question[]

  // Assignment
  assignment        Assignment  @relation(fields: [assignmentId], references: [id])
  assignmentId      String      @db.Uuid
  @@map("activity")
}

model ActivityData {
  id                String      @id @default(uuid()) @db.Uuid
  createdAt         DateTime    @default(now())
  startedAt         DateTime?
  profileId         String      @db.Uuid @default(uuid())

  answers           Int[]
  answersAt         DateTime[]
  answersTrace      Json[]      // { index: Number, elapsedTime: Number, correct: Boolean, pts: Number, accumulativeScore: Number }[]
  currentQuestionId Int         @default(0)

  completed         Boolean     @default(false)
  completedAt       DateTime?
  score             Int         @default(0)
  
  activityId        String      @db.Uuid
  assignmentData    AssignmentData @relation(fields: [assignmentDataId], references: [id])
  assignmentDataId  String      @db.Uuid

  traceLogFiles     TraceLogFile[]
  highlights        Highlight[]
  annotations       Annotation[]

  @@map("user_activity_data")
}

model TraceLogFile {
  id                String      @id @default(uuid()) @db.Uuid
  createdAt         DateTime    @default(now())
  filepath          String

  // Helpful information
  activityId        String      @db.Uuid @default(uuid())
  profileId         String      @db.Uuid @default(uuid())

  // User Activity
  activityData  ActivityData @relation(fields: [activityDataId], references: [id])
  activityDataId String      @db.Uuid
  @@map("tracelog_file")

}

model ReadingFile {
  id                String      @id @default(uuid()) @db.Uuid
  title             String
  filepath          String
  size              Int
  index             Int

  // Highlights
  highlights        Highlight[]
  annotations       Annotation[]

  // ReadingActivity
  activity          ReadingActivity @relation(fields: [activityId], references: [id])
  activityId        String      @db.Uuid
  @@map("activity_reading_file")
}

model Highlight {
  id                String      @id @default(uuid()) @db.Uuid
  content           String
  rects             Json  // x1, y1, x2, y2, width, height

  // PDF File
  file              ReadingFile @relation(fields: [fileId], references: [id])
  fileId            String      @db.Uuid

  // User Activity
  activityData      ActivityData @relation(fields: [activityDataId], references: [id])
  activityDataId    String      @db.Uuid
  @@map("highlight")
}

model Annotation {
  id                String      @id @default(uuid()) @db.Uuid
  content           String
  position          Json

  // PDF File
  file              ReadingFile @relation(fields: [fileId], references: [id])
  fileId            String      @db.Uuid

  // User Activity
  activityData      ActivityData @relation(fields: [activityDataId], references: [id])
  activityDataId    String      @db.Uuid
  @@map("annotation")
}

model ReadingActivity {
  id                String      @id @default(uuid()) @db.Uuid
  files             ReadingFile[]
  @@map("activity_reading")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  LIKERT_SCALE
}

model Question {
  id                String      @id @default(uuid()) @db.Uuid
  content           String
  index             Int
  options           String[]
  type              QuestionType
  answer            Int
  pts               Int         @default(1)

  // Activity
  activity          Activity    @relation(fields: [activityId], references: [id])
  activityId        String      @db.Uuid
  @@map("question")
}